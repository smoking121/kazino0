import random
import time
import asyncio
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes
)


INITIAL_BALANCE = 100
WAIT_TIME = 600 #–∑–¥–µ—Å—å —è –¥–æ–±–∞–≤–∏–ª –±–∞–∑–æ–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–∞–±—ã –±–æ—Ç –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
class PlayerProfile:
    def __init__(self, telegram_id):
        self.telegram_id = telegram_id
        self.balance = INITIAL_BALANCE
        self.last_refill = 0 #—Å–æ–∑–¥–∞–ª –∫–ª–∞—Å—Å, –¥–ª—è —Ö—Ä–∞–Ω–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞
    def can_refill(self):
        return time.time() - self.last_refill >= WAIT_TIME


    def refill_balance(self):
        if self.can_refill():
            self.balance = INITIAL_BALANCE
            self.last_refill = time.time()
            return True
        return False #—Å–æ–∑–¥–∞–ª —Å–∏—Å—Ç–µ–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞, –µ—Å–ª–∏ —É –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –¥–µ–Ω—å–≥–∏
        self.past_games = []
        self.wins_count = 0
        self.losses_count = 0
        self.total_won = 0
        self.total_lost = 0 #–¥–æ–±–∞–≤–∏–ª —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏–≥—Ä


    def get_wait_time(self):
        remaining = WAIT_TIME - (time.time() - self.last_refill)
        return max(0, int(remaining)) #–¥–æ–±–∞–≤–∏–ª –º–µ—Ç–æ–¥ get_wait_time, –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è –º–µ–∂–¥—É –≤—ã–¥–∞—á–µ–π –¥–µ–Ω–µ–≥


    def record_game(self, game_mode, bet_kind, outcome, points):
        self.past_games.append({
            'mode': game_mode,
            'bet': bet_kind,
            'outcome': outcome,
            'points': points,
            'timestamp': time.strftime("%Y-%m-%d %H:%M:%S")
        })    #–¥–æ–±–∞–≤–∏–ª –º–µ—Ç–æ–¥ record_game, –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–≥—Ä—ã
        if outcome == 'win':
            self.wins_count += 1
            self.total_won += points
        else:
            self.losses_count += 1
            self.total_lost += points

        if len(self.past_games) > 20:
            self.past_games.pop(0) #–∑–¥–µ—Å—å —è –¥–æ–±–∞–≤–∏–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏ –∏–≥—Ä–µ
player_accounts = {} #—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π –∏–≥—Ä–æ–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–π–¥—É—Ç –≤ –±–æ—Ç–∞


def get_player_profile(user_id):
    if user_id not in player_accounts:
        player_accounts[user_id] = PlayerProfile(user_id)
    return player_accounts[user_id]  #–¥–æ–±–∞–≤–∏–ª –º–µ—Ç–æ–¥ get_player_profile, –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è—è—è –ø—Ä–æ—Ñ–∏–ª—è –∏–≥—Ä–æ–∫–∞–æ
#—Å–æ–∑–¥–∞—é –≥–ª–∞–≤–Ω—É—é –º–µ–Ω—é—à–∫—É —Å–≤–æ–µ–≥–æ –∫–∞–∑–∏–Ω–æ 


def create_main_menu():
    menu = [
        [InlineKeyboardButton("üé≤ –ö—É–±–∏–∫", callback_data='roll_game')],
        [InlineKeyboardButton("üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª", callback_data='hoop_game')],
        [InlineKeyboardButton("‚öΩ –§—É—Ç–±–æ–ª", callback_data='goal_game')],
        [InlineKeyboardButton("üéØ –î–∞—Ä—Ç—Å", callback_data='dart_game')],
        [
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='performance'),
            InlineKeyboardButton("üí∞ –ú–æ–Ω–µ—Ç—ã", callback_data='refill_balance')
        ],
        [
            InlineKeyboardButton("‚ÑπÔ∏è –ë–∞–ª–∞–Ω—Å", callback_data='current_balance'),
            InlineKeyboardButton("üí∏ –ü–µ—Ä–µ–¥–∞—Ç—å –º–æ–Ω–µ—Ç—ã", callback_data='send_points')
        ]
    ]
    return InlineKeyboardMarkup(menu)


def create_dice_menu():
    menu = [
        [InlineKeyboardButton(">3 (x2)", callback_data='roll_high')],
        [InlineKeyboardButton("<3 (x2)", callback_data='roll_low')],
        [InlineKeyboardButton("–ß–µ—Ç–Ω–æ–µ (x2)", callback_data='roll_even')],
        [InlineKeyboardButton("–ù–µ—á–µ—Ç–Ω–æ–µ (x2)", callback_data='roll_odd')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='return_to_menu')]
    ]
    return InlineKeyboardMarkup(menu) #—Å–æ–∑–¥–∞—é –º–µ–Ω—é –¥–ª—è –∫—É–±–∏–∫–∞


def create_sport_menu(game_mode):
    icon = "üèÄ" if game_mode == "hoop" else "‚öΩ" if game_mode == "goal" else "üéØ"
    menu = [
        [InlineKeyboardButton(f"{icon} –ü—Ä–æ–ø—É—Å—Ç–∏—Ç (x2)", callback_data=f'{game_mode}_miss')],
        [InlineKeyboardButton(f"{icon} –ü–æ–ø–∞–¥–µ—Ç (x2)", callback_data=f'{game_mode}_hit')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='return_to_menu')]
    ]
    return InlineKeyboardMarkup(menu) #—Å–æ–∑–¥–∞—é –º–µ–Ω—é –¥–ª—è —Ñ—É—Ç–±–æ–ª–∞ –∏ –±–∞—Å–∫–µ—Ç–±–æ–ª–∞


def create_darts_menu():
    menu = [
        [InlineKeyboardButton("üéØ –í —è–±–ª–æ—á–∫–æ (x5)", callback_data='dart_bullseye')],
        [InlineKeyboardButton("üéØ –í–Ω–µ—à–Ω–µ–µ –∫–æ–ª—å—Ü–æ (x3)", callback_data='dart_outer')],
        [InlineKeyboardButton("üéØ –í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –∫–æ–ª—å—Ü–æ (x2)", callback_data='dart_inner')],
        [InlineKeyboardButton("üéØ –ü–æ–ø–∞–¥–∞–Ω–∏–µ (x1.5)", callback_data='dart_hit')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='return_to_menu')]
    ]
    return InlineKeyboardMarkup(menu) #—Å–æ–∑–¥–∞—é –º–µ–Ω—é –¥–ª—è –∏–≥—Ä—ã –≤ –¥–∞—Ä—Ç—Å, —Å —Ä–∞–∑–Ω—ã–º–∏ –∫–æ—ç—ç—Ñ–∏—Ü–∏—ç–Ω—Ç–∞–º–∏ –¥–ª—è –≤—ã–∏–≥—Ä—ã—à–∞


async def show_performance(update: Update, player: PlayerProfile):
    if not player.past_games:
        await update.callback_query.edit_message_text(
            text="üìä –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –∏–≥—Ä",
            reply_markup=create_main_menu()
        )
        return
    games_played = player.wins_count + player.losses_count
    success_rate = (player.wins_count / games_played * 100) if games_played > 0 else 0
    net_result = player.total_won - player.total_lost
    performance_text = (
        f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"üéÆ –í—Å–µ–≥–æ –∏–≥—Ä: {games_played}\n"
        f"‚úÖ –í—ã–∏–≥—Ä—ã—à–∏: {player.wins_count} ({success_rate:.1f}%)\n"
        f"‚ùå –ü—Ä–æ–∏–≥—Ä—ã—à–∏: {player.losses_count}\n"
        f"üí∞ –°—É–º–º–∞—Ä–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à: +{player.total_won}\n"
        f"üí∏ –°—É–º–º–∞—Ä–Ω—ã–π –ø—Ä–æ–∏–≥—Ä—ã—à: -{player.total_lost}\n"
        f"üíµ –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {f'+{net_result}' if net_result >= 0 else net_result}\n\n"
        f"‚è≥ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–≥—Ä—ã:\n"
    )  #—Å–æ–∑–¥–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä
    for game in player.past_games[-5:][::-1]:
        icon = "üé≤" if game['mode'] == 'roll' else "üèÄ" if game['mode'] == 'hoop' else "‚öΩ" if game[
                                                                                                'mode'] == 'goal' else "üéØ"
        result_icon = "üü¢" if game['outcome'] == 'win' else "üî¥"
        bet_kind = game['bet']
        points = game['points']
        game_time = game['timestamp'][11:16]

        performance_text += (
            f"{result_icon} {icon} {game['mode']} ({bet_kind}) "
            f"{'+' if game['outcome'] == 'win' else '-'}{abs(points)} "
            f"({game_time})\n"
        )  #–æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–≥—Ä –≤ –∫–∞–∑–∏–Ω–æ
    await update.callback_query.edit_message_text(
        text=performance_text,
        reply_markup=create_main_menu()
    )   #–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç—Å—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ –±–æ—Ç–∞


async def start_bot(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    player = get_player_profile(update.effective_user.id)
    welcome_msg = (
        f"üé∞ –ò–≥—Ä–æ–≤–æ–π –±–æ—Ç | –ë–∞–ª–∞–Ω—Å: {player.balance} –º–æ–Ω–µ—Ç\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
        "/kurs - –£–∑–Ω–∞—Ç—å –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:"
    )
    await update.message.reply_text(
        welcome_msg,
        reply_markup=create_main_menu()
    )  #–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –≤ –±–æ—Ç–µ


async def show_help(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    help_msg = (
        "üÜò –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:\n\n"
        "üé∞ –≠—Ç–æ –∏–≥—Ä–æ–≤–æ–π –±–æ—Ç —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –∫–∞–∑–∏–Ω–æ. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä—ã:\n"
        "- üé≤ –ö—É–±–∏–∫\n- üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª\n- ‚öΩ –§—É—Ç–±–æ–ª\n- üéØ –î–∞—Ä—Ç—Å\n\n"
        "üí∞ –í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –º–æ–Ω–µ—Ç—ã –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–∞–º\n"
        "üìä –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–≤–æ–∏—Ö –∏–≥—Ä\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @skyhardcore"
    )
    await update.message.reply_text(help_msg, reply_markup=create_main_menu())    #–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help  –≤ –±–æ—Ç–µ


async def show_exchange_rate(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        response = requests.get('https://www.cbr-xml-daily.ru/daily_json.js')
        data = response.json()
        usd_value = data['Valute']['USD']['Value']    #–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /kurs, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ñ—Ñ –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è–π—â–∏–π –¥–µ–Ω—å —Å –æ—Ñ—Ñ —Å–∞–π—Ç–∞ –†—Ñ
        rate_msg = (
            f"üíµ –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ (–¶–ë –†–§):\n"
            f"1 USD = {usd_value:.2f} RUB\n\n"
            f"üìÖ –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {data['Date'][:10]}"
        )
        await update.message.reply_text(rate_msg, reply_markup=create_main_menu())        #–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /kurs, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ñ—Ñ –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è–π—â–∏–π –¥–µ–Ω—å —Å –æ—Ñ—Ñ —Å–∞–π—Ç–∞ –†—Ñ
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞: {e}")
        await update.message.reply_text(
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=create_main_menu()
        )


async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    try:
        await query.answer()
        player = get_player_profile(update.effective_user.id) # –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –≤ –±–æ—Ç–µ
        if query.data == 'roll_game':
            await query.edit_message_text(
                text="üé≤ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞–≤–∫–∏:",
                reply_markup=create_dice_menu()
            )   # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–≥—Ä—ã –≤ –∫—É–±–∏–∫
        elif query.data == 'performance':
            await show_performance(update, player)   #–∫–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ç–∏—Ç—Å—Ç–∏–∫–∏
        elif query.data in ['hoop_game', 'goal_game', 'dart_game']:
            game_mode = query.data.split('_')[0]
            game_title = {
                'hoop': "üèÄ –ü–æ–ø–∞–¥–µ—Ç –ª–∏ –º—è—á –≤ –∫–æ—Ä–∑–∏–Ω—É?",
                'goal': "‚öΩ –ó–∞–±—å–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫ –≥–æ–ª?",
                'dart': "üéØ –ö—É–¥–∞ –ø–æ–ø–∞–¥–µ—Ç –¥—Ä–æ—Ç–∏–∫?"
            }[game_mode]  # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–∞—Å–∫–µ—Ç–±–æ–ª–∞ –∏ —Ñ—É—Ç–±–æ–ª–∞
            if game_mode == 'dart':
                await query.edit_message_text(
                    text=f"{game_title}\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–≤–∫—É:",
                    reply_markup=create_darts_menu()
                )
            else:
                await query.edit_message_text(
                    text=f"{game_title}\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–≤–∫—É:",
                    reply_markup=create_sport_menu(game_mode)
                )   #–≤—ã–±–æ—Ä –º–µ–Ω—é –¥–ª—è –∏–≥—Ä—ã
        elif any(query.data.startswith(game) for game in
                 ['roll_', 'hoop_', 'goal_', 'dart_']):
            parts = query.data.split('_')
            game_mode = parts[0]
            bet_kind = parts[1]

            context.user_data['game_mode'] = game_mode
            context.user_data['bet_kind'] = bet_kind   #–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞–≤–æ–∫ –≤ –∫–∞–∑–∏–Ω–æ
            bet_title = {
                'high': ">3", 'low': "<3", 'even': "–ß–µ—Ç–Ω–æ–µ", 'odd': "–ù–µ—á–µ—Ç–Ω–æ–µ",
                'miss': "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç", 'hit': "–ü–æ–ø–∞–¥–µ—Ç",
                'bullseye': "–í —è–±–ª–æ—á–∫–æ", 'outer': "–í–Ω–µ—à–Ω–µ–µ –∫–æ–ª—å—Ü–æ",
                'inner': "–í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –∫–æ–ª—å—Ü–æ", 'hit': "–ü–æ–ø–∞–¥–∞–Ω–∏–µ"
            }[bet_kind]

            await query.edit_message_text(
                text=f"{'üé≤' if game_mode == 'roll' else 'üèÄ' if game_mode == 'hoop' else '‚öΩ' if game_mode == 'goal' else 'üéØ'} "
                     f"–°—Ç–∞–≤–∫–∞: {bet_title}\n"
                     f"üí∞ –ë–∞–ª–∞–Ω—Å: {player.balance}\n\n"
                     "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏:",
                reply_markup=None
            )     #–¥–æ–±–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤–≤–æ–¥–µ —Å—É–º–º—ã —Å—Ç–∞–≤–∫–∏
        elif query.data == 'refill_balance':
            if player.balance <= 0:
                if player.can_refill():
                    player.balance = INITIAL_BALANCE
                    player.last_refill = time.time()
                    await query.edit_message_text(
                        text=f"üí∞ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {INITIAL_BALANCE} –º–æ–Ω–µ—Ç!\n–ë–∞–ª–∞–Ω—Å: {player.balance}",
                        reply_markup=create_main_menu()
                    )    #–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
                else:
                    remaining = player.get_wait_time()
                    minutes, seconds = divmod(remaining, 60)
                    await query.edit_message_text(
                        text=f"‚è≥ –í—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –º–æ–Ω–µ—Ç—ã —á–µ—Ä–µ–∑ {minutes} –º–∏–Ω {seconds} —Å–µ–∫",
                        reply_markup=create_main_menu()
                    )
            else:
                await query.edit_message_text(
                    text=f"üí∞ –£ –≤–∞—Å –µ—â–µ –µ—Å—Ç—å –º–æ–Ω–µ—Ç—ã: {player.balance}",
                    reply_markup=create_main_menu()
                )    #–ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è
        elif query.data == 'current_balance':
            await query.edit_message_text(
                text=f"üí∞ –ë–∞–ª–∞–Ω—Å: {player.balance} –º–æ–Ω–µ—Ç",
                reply_markup=create_main_menu()
            )  #–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –±–∞–ª–∞–Ω—Å–∞
        elif query.data == 'send_points':
            context.user_data['transfer_state'] = 'awaiting_user'
            await query.edit_message_text(
                text="üí∏ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å –º–æ–Ω–µ—Ç—ã:",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='return_to_menu')]])
            )   #–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–µ–µ–Ω–µ–≥ –≤ –±–æ—Ç–µ –æ—Ç –∏–≥—Ä–æ–∫–∞ –∫ –∏–≥—Ä–æ–∫—É –ø–æ ID  –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ
        elif query.data == 'return_to_menu':
            if 'transfer_state' in context.user_data:
                del context.user_data['transfer_state']
            await query.edit_message_text(
                text=f"üí∞ –ë–∞–ª–∞–Ω—Å: {player.balance} –º–æ–Ω–µ—Ç",
                reply_markup=create_main_menu()
            )   #–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è  –≤–º–µ–Ω—é
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=create_main_menu()
        )   #–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫


async def process_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    player = get_player_profile(update.effective_user.id)

    if 'transfer_state' in context.user_data:
        if context.user_data['transfer_state'] == 'awaiting_user':
            try:
                recipient_id = int(update.message.text)
                if recipient_id == player.telegram_id:
                    await update.message.reply_text("‚ùå –ù–µ–ª—å–∑—è –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –º–æ–Ω–µ—Ç—ã —Å–∞–º–æ–º—É —Å–µ–±–µ!")
                    return    #–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ø–µ—Ä–µ–¥–∞—á–µ –º–æ–Ω–µ—Ç
                context.user_data['recipient_id'] = recipient_id
                context.user_data['transfer_state'] = 'awaiting_amount'

                await update.message.reply_text(
                    "üí∏ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –º–æ–Ω–µ—Ç –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏:",
                    reply_markup=InlineKeyboardMarkup(
                        [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='return_to_menu')]])
                )
            except ValueError:
                await update.message.reply_text("‚ùå ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")   #–æ–±—Ä–∞–±–æ—Ç–∫–∞ ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è –æ–º–Ω–µ—Ç
        elif context.user_data['transfer_state'] == 'awaiting_amount':
            try:
                amount = int(update.message.text)
                if amount <= 0:
                    await update.message.reply_text("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!")
                    return
                if amount > player.balance:
                    await update.message.reply_text(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç! –í–∞—à –±–∞–ª–∞–Ω—Å: {player.balance}")
                    return    #–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã –ø–µ—Ä–µ–≤–æ–¥–∞
                recipient_id = context.user_data['recipient_id']
                recipient = get_player_profile(recipient_id)

                player.balance -= amount
                recipient.balance += amount

                await update.message.reply_text(
                    f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–ª–∏ {amount} –º–æ–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {recipient_id}\n"
                    f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {player.balance}",
                    reply_markup=create_main_menu()
                )  #–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –º–æ–Ω–µ—Ç –æ—Ç –∏–≥—Ä–æ–∫–∞ –∫ –∏–≥—Ä–æ–∫—É
                try:
                    await context.bot.send_message(
                        chat_id=recipient_id,
                        text=f"üí∏ –í–∞–º –ø–µ—Ä–µ–¥–∞–ª–∏ {amount} –º–æ–Ω–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.full_name}\n"
                             f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {recipient.balance}"
                    )
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è: {e}")    #–¥–æ–±–∞–≤–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Å–∞–º–æ–º –±–æ—Ç–µ –æ –ø–µ—Ä–µ–≤–æ–¥–µ
                del context.user_data['transfer_state']
                del context.user_data['recipient_id']
            except ValueError:
                await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")   #–æ—Ç—á–∏—â–∞—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞ 
    else:
        await process_bet(update, context)


async def process_bet(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    player = get_player_profile(update.effective_user.id)
    try:
        bet_amount = int(update.message.text)
        if bet_amount <= 0:
            await update.message.reply_text("‚ùå –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!")
            return
        if bet_amount > player.balance:
            await update.message.reply_text(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç! –ë–∞–ª–∞–Ω—Å: {player.balance}")
            return  #–∑–¥–µ—Å—å –¥–æ–±–∞–≤–ª—è—é —Ñ—É–Ω–∫—Ü–∏—é process_bet –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞–≤–∫–∏
        if 'game_mode' not in context.user_data:
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–≥—Ä—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            return

        game_mode = context.user_data['game_mode']
        bet_kind = context.user_data['bet_kind'] # –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–≥—Ä—ã
        if game_mode == 'roll':
            await play_dice(update, context, player, bet_amount, bet_kind)
        elif game_mode == 'dart':
            await play_darts(update, context, player, bet_amount, bet_kind)
        else:
            await play_sport(update, context, player, bet_amount, game_mode, bet_kind)  #–≤—ã–±–æ—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏–≥—Ä—ã
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!") # –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–≤–æ–¥–∞


async def play_dice(update: Update, context: ContextTypes.DEFAULT_TYPE, player: PlayerProfile, bet_amount: int,
                    bet_kind: str):
    try:
        dice_result = await update.message.reply_dice(emoji="üé≤")
        dice_value = dice_result.dice.value
        await asyncio.sleep(3) #—Ñ—É–Ω–∫—Ü–∏—è –∏–≥—Ä—ã –≤ –∫—É–±–∏–∫ 
        is_win = False

        if bet_kind == 'high' and dice_value > 3:
            is_win = True
        elif bet_kind == 'low' and dice_value < 3:
            is_win = True
        elif bet_kind == 'even' and dice_value % 2 == 0:
            is_win = True
        elif bet_kind == 'odd' and dice_value % 2 != 0:
            is_win = True # –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–∏ –±—Ä–æ—Å–∫–µ
        if is_win:
            win_amount = bet_amount * 2
            player.balance += win_amount
            result = 'win'
            result_msg = f"üé≤ –í—ã–ø–∞–ª–æ: {dice_value}\nüéâ –í—ã–∏–≥—Ä—ã—à: +{win_amount} –º–æ–Ω–µ—Ç!"
        else:
            player.balance -= bet_amount
            result = 'lose'
            result_msg = f"üé≤ –í—ã–ø–∞–ª–æ: {dice_value}\nüò¢ –ü—Ä–æ–∏–≥—Ä—ã—à: -{bet_amount} –º–æ–Ω–µ—Ç."

        bet_title = {
            'high': '>3', 'low': '<3',
            'even': '–ß–µ—Ç–Ω–æ–µ', 'odd': '–ù–µ—á–µ—Ç–Ω–æ–µ'
        }[bet_kind]
        player.record_game('roll', bet_title, result, win_amount if is_win else -bet_amount)

        await update.message.reply_text(
            text=f"{result_msg}\nüí∞ –ë–∞–ª–∞–Ω—Å: {player.balance}",
            reply_markup=create_main_menu()
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –∫—É–±–∏–∫–µ: {e}")
        await update.message.reply_text(
            text="‚ö†Ô∏è –û—à–∏–±–∫–∞. –°—Ç–∞–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞.",
            reply_markup=create_main_menu()
        )
    finally:
        context.user_data.clear()  # –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã –∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ 
