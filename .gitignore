import random
import time
import asyncio
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes
)


INITIAL_BALANCE = 100
WAIT_TIME = 600 #здесь я добавил базовые импорты и константы дабы бот запустился
class PlayerProfile:
    def __init__(self, telegram_id):
        self.telegram_id = telegram_id
        self.balance = INITIAL_BALANCE
        self.last_refill = 0 #создал класс, для хранния данных игрока
    def can_refill(self):
        return time.time() - self.last_refill >= WAIT_TIME


    def refill_balance(self):
        if self.can_refill():
            self.balance = INITIAL_BALANCE
            self.last_refill = time.time()
            return True
        return False #создал систему пополнения баланса, если у вас закончились деньги
        self.past_games = []
        self.wins_count = 0
        self.losses_count = 0
        self.total_won = 0
        self.total_lost = 0 #добавил хранение истории игр


    def get_wait_time(self):
        remaining = WAIT_TIME - (time.time() - self.last_refill)
        return max(0, int(remaining)) #добавил метод get_wait_time, для расчета времени ожидания между выдачей денег


    def record_game(self, game_mode, bet_kind, outcome, points):
        self.past_games.append({
            'mode': game_mode,
            'bet': bet_kind,
            'outcome': outcome,
            'points': points,
            'timestamp': time.strftime("%Y-%m-%d %H:%M:%S")
        })    #добавил метод record_game, для записи результатов игры
        if outcome == 'win':
            self.wins_count += 1
            self.total_won += points
        else:
            self.losses_count += 1
            self.total_lost += points

        if len(self.past_games) > 20:
            self.past_games.pop(0) #здесь я добавил обновление статистики при игре
player_accounts = {} #хранение профилей игроков, которые зайдут в бота


def get_player_profile(user_id):
    if user_id not in player_accounts:
        player_accounts[user_id] = PlayerProfile(user_id)
    return player_accounts[user_id]  #добавил метод get_player_profile, для полученияяя профиля игрокао
#создаю главную менюшку своего казино 


def create_main_menu():
    menu = [
        [InlineKeyboardButton("🎲 Кубик", callback_data='roll_game')],
        [InlineKeyboardButton("🏀 Баскетбол", callback_data='hoop_game')],
        [InlineKeyboardButton("⚽ Футбол", callback_data='goal_game')],
        [InlineKeyboardButton("🎯 Дартс", callback_data='dart_game')],
        [
            InlineKeyboardButton("📊 Статистика", callback_data='performance'),
            InlineKeyboardButton("💰 Монеты", callback_data='refill_balance')
        ],
        [
            InlineKeyboardButton("ℹ️ Баланс", callback_data='current_balance'),
            InlineKeyboardButton("💸 Передать монеты", callback_data='send_points')
        ]
    ]
    return InlineKeyboardMarkup(menu)


def create_dice_menu():
    menu = [
        [InlineKeyboardButton(">3 (x2)", callback_data='roll_high')],
        [InlineKeyboardButton("<3 (x2)", callback_data='roll_low')],
        [InlineKeyboardButton("Четное (x2)", callback_data='roll_even')],
        [InlineKeyboardButton("Нечетное (x2)", callback_data='roll_odd')],
        [InlineKeyboardButton("🔙 Назад", callback_data='return_to_menu')]
    ]
    return InlineKeyboardMarkup(menu) #создаю меню для кубика


def create_sport_menu(game_mode):
    icon = "🏀" if game_mode == "hoop" else "⚽" if game_mode == "goal" else "🎯"
    menu = [
        [InlineKeyboardButton(f"{icon} Пропустит (x2)", callback_data=f'{game_mode}_miss')],
        [InlineKeyboardButton(f"{icon} Попадет (x2)", callback_data=f'{game_mode}_hit')],
        [InlineKeyboardButton("🔙 Назад", callback_data='return_to_menu')]
    ]
    return InlineKeyboardMarkup(menu) #создаю меню для футбола и баскетбола
